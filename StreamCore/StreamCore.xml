<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StreamCore</name>
    </assembly>
    <members>
        <member name="P:StreamCore.Interfaces.IChatMessage.Id">
            <summary>
            The internal identifier for this chat message
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.IsSystemMessage">
            <summary>
            True if this message was generated by the underlying chat service, and not by another user.
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.IsActionMessage">
            <summary>
            True if the message is a /me message, or whatever the equivalent is on the current chat service.
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.IsHighlighted">
            <summary>
            True if the message should be highlighted (pings, subscriber notifications, etc)
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.IsPing">
            <summary>
            True if the logged in user was tagged/pinged in this message.
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.Message">
            <summary>
            The exact message the user sent into the chat, *with* any custom formatting applied by the chat service.
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.Sender">
            <summary>
            The user who sent this message
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.Channel">
            <summary>
            The channel this message was sent in
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.Emotes">
            <summary>
            A list of *all* the emotes/emojis contained in this message, in reverse order to make replacing them with something else extremely simple.
            </summary>
        </member>
        <member name="P:StreamCore.Interfaces.IChatMessage.Metadata">
            <summary>
            All the raw metadata associated with this message. This contains platform-specific data for devs who want to access any extra data that may not have been parsed.
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnLogin">
            <summary>
            Callback that occurs when a successful login to the provided streaming service occurs 
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnTextMessageReceived">
            <summary>
            Callback that occurs when a text message is received
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnJoinChannel">
            <summary>
            Callback that occurs when the user joins a chat channel
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnRoomStateUpdated">
            <summary>
            Callback that occurs when a chat channel receives updated info
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnLeaveChannel">
            <summary>
            Callback that occurs when the user leaves a chat channel
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnChatCleared">
            <summary>
            Callback that occurs when a users chat is cleared. If null, that means the entire chat was cleared; otherwise the argument is a user id.
            </summary>
        </member>
        <member name="E:StreamCore.Interfaces.IStreamingService.OnMessageCleared">
            <summary>
            Callback that occurs when a specific chat message is cleared. Argument is the message id to be cleared.
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchEmote.Bits">
            <summary>
            The number of bits associated with this emote (probably a cheermote)
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchEmote.Color">
            <summary>
            If there are bits associated with this emote, this is the color the bits text should be.
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchMessage.Type">
            <summary>
            The IRC message type for this TwitchMessage
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchMessage.Bits">
            <summary>
            The number of bits in this message, if any.
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchRoomstate.SlowModeInterval">
            <summary>
            The number of seconds a chatter without moderator privileges must wait between sending messages
            </summary>
        </member>
        <member name="P:StreamCore.Models.Twitch.TwitchRoomstate.MinFollowTime">
            <summary>
            If FollowersOnly is true, this specifies the number of minutes a user must be following before they can chat.
            </summary>
        </member>
        <member name="M:StreamCore.Services.Twitch.TwitchMessageParser.ParseRawMessage(System.String,System.Collections.Concurrent.ConcurrentDictionary{System.String,StreamCore.Interfaces.IChatChannel},StreamCore.Interfaces.IChatUser,StreamCore.Interfaces.IChatMessage[]@)">
            <summary>
            Takes a raw Twitch message and parses it into an IChatMessage
            </summary>
            <param name="rawMessage">The raw message sent from Twitch</param>
            <param name="parsedMessages">A list of chat messages that were parsed from the rawMessage</param>
            <returns>True if parsedMessages.Count > 0</returns>
        </member>
        <member name="M:StreamCore.Services.Twitch.TwitchService.SendRawMessage(System.String,System.Boolean)">
            <summary>
            Sends a raw message to the Twitch server
            </summary>
            <param name="rawMessage">The raw message to send.</param>
            <param name="forwardToSharedClients">
            Whether or not the message should also be sent to other clients in the assembly that implement StreamCore, or only to the Twitch server.<br/>
            This should only be set to true if the Twitch server would rebroadcast this message to other external clients as a response to the message.
            </param>
        </member>
    </members>
</doc>
